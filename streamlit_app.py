import streamlit as st
import pandas as pd
import plotly.express as px
import streamlit.components.v1 as components

st.set_page_config(page_title="Kalkula캜ka d콢chodov칠ho spo콏en칤", layout="centered")

st.title("游늳 Kalkula캜ka d콢chodov칠ho spo콏en칤")

hruba_mzda = st.number_input("Hrub치 mzda (m캩s칤캜n캩, K캜)", min_value=0.0, value=40000.0, step=1000.0)

def synced_slider(label, min_val, max_val, default, step):
    col1, col2 = st.columns([4, 1], gap="small")
    with col1:
        slider_val = st.slider(label, min_val, max_val, default, step=step, key=label+"_slider")
    with col2:
        st.markdown("<div style='height: 30px'></div>", unsafe_allow_html=True)
        num_val = st.number_input(" ", min_value=min_val, max_value=max_val, value=slider_val, step=step,
                                 label_visibility="collapsed", key=label+"_input")

    # Synchronizace slideru a inputu
    if num_val != slider_val:
        slider_val = num_val
    return slider_val

rust_mzdy = synced_slider("Pr콢m캩rn칳 ro캜n칤 r콢st mzdy (%)", 0.0, 100.0, 3.0, 0.1)
pocet_let = int(synced_slider("Po캜et let spo콏en칤", 1, 100, 30, 1))
procento_sporeni = synced_slider("Kolik % z hrub칠 mzdy chce코 spo콏it", 0.0, 100.0, 31.3, 0.1)
inflace = synced_slider("Meziro캜n칤 inflace (%)", 0.0, 100.0, 2.5, 0.1)
rust_investice = synced_slider("Ro캜n칤 v칳nos investice (%)", 0.0, 100.0, 6.0, 0.1)

# P콏ep캜et na desetinn치 캜칤sla
rust_mzdy /= 100
procento_sporeni /= 100
inflace /= 100
rust_investice /= 100

# Inicializace prom캩nn칳ch
investovano = 0
zustatek_nom = 0
zustatek_real = 0

# Tabulka pro v칳sledky
data = []

for rok in range(1, pocet_let + 1):
    aktualni_mzda = hruba_mzda * ((1 + rust_mzdy) ** (rok - 1))
    rocni_vklad = aktualni_mzda * 12 * procento_sporeni

    investovano += rocni_vklad
    zustatek_nom = (zustatek_nom + rocni_vklad) * (1 + rust_investice)
    zustatek_real = (zustatek_real + rocni_vklad) * ((1 + rust_investice) / (1 + inflace))

    data.append({
        "Rok": rok,
        "Investovan치 캜치stka": round(investovano),
        "Nomin치ln칤 hodnota": round(zustatek_nom),
        "Re치ln치 hodnota": round(zustatek_real)
    })

# DataFrame pro graf
df = pd.DataFrame(data)

# Zobrazen칤 v칳sledk콢
st.subheader("游늵 Shrnut칤")
st.markdown(f"### Celkov치 naspo콏en치 캜치stka: **{df['Nomin치ln칤 hodnota'].iloc[-1]:,.0f} K캜**")
st.markdown(f"### O캜i코t캩n치 o inflaci: **{df['Re치ln치 hodnota'].iloc[-1]:,.0f} K캜**")
st.markdown(f"<small>Investovan치 캜치stka: {df['Investovan치 캜치stka'].iloc[-1]:,.0f} K캜</small>", unsafe_allow_html=True)

# Tla캜칤tko pro zobrazen칤 renty
if st.button("Spo캜칤tat bezpe캜nou ro캜n칤 rentu"):
    realny_vynos = rust_investice - inflace
    renta = df['Re치ln치 hodnota'].iloc[-1] * realny_vynos
    st.markdown(f"### Bezpe캜n치 ro캜n칤 renta: **{renta:,.0f} K캜/rok**")
    st.caption("Vypo캜teno jako naspo콏en치 캜치stka 칑 (v칳nos - inflace). P콏edpoklad: 캜치stku nevy캜erp치코 a nech치코 ji investovanou.")

# Interaktivn칤 graf
st.subheader("游늴 Graf v칳voje spo콏en칤")
zobrazeni = st.radio("Zobrazit hodnoty: ", ["Nomin치ln칤", "Po inflaci"])

if zobrazeni == "Nomin치ln칤":
    fig = px.bar(df, x="Rok", y=["Investovan치 캜치stka", "Nomin치ln칤 hodnota"],
                 barmode='group', title="Nomin치ln칤 hodnota vs. investice")
else:
    fig = px.bar(df, x="Rok", y=["Investovan치 캜치stka", "Re치ln치 hodnota"],
                 barmode='group', title="Re치ln치 hodnota (o캜i코t캩n치 o inflaci) vs. investice")

fig.update_layout(xaxis_title="Rok", yaxis_title="K캜", legend_title="")
st.plotly_chart(fig, use_container_width=True)
